"use client";

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 rocksRing.glb -t --shadows -i -E -T 
Files: rocksRing.glb [38.57KB] > C:\Users\FIDEL RP\Documents\DuvanRozo\cbtic-2024\public\rocksRing-transformed.glb [14.9KB] (61%)
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    Icosphere002: THREE.Mesh;
    Icosphere002_1: THREE.Mesh;
  };
  materials: {
    PaletteMaterial002: THREE.MeshStandardMaterial;
    PaletteMaterial001: THREE.MeshStandardMaterial;
  };
};

export function Model(props: JSX.IntrinsicElements["group"]) {
  const animation = useRef<THREE.Group>(null!);
  const frameInterval = useRef<number>(1 / 40);
  const accumulatedTime = useRef<number>(0);
  const { nodes, materials } = useGLTF(
    "/rocksRing-transformed.glb"
  ) as GLTFResult;

  useFrame((_, delta) => {
    accumulatedTime.current += delta;

    if (!animation.current) return;
    if (accumulatedTime.current <= frameInterval.current) return;

    animation.current.rotation.y += 0.006;
    accumulatedTime.current = 0;
  });

  return (
    <group ref={animation} {...props} dispose={null}>
      <group rotation={[Math.PI / 2, 0, -Math.PI / 2]} scale={0.054}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Icosphere002.geometry}
          material={materials.PaletteMaterial002}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Icosphere002_1.geometry}
          material={materials.PaletteMaterial001}
        />
      </group>
    </group>
  );
}
